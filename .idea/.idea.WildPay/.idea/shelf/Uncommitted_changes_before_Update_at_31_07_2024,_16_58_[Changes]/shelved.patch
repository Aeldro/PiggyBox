Index: WildPay/Repositories/ExpenditureRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore;\nusing WildPay.Data;\nusing WildPay.Interfaces;\nusing WildPay.Models.Entities;\n\nnamespace WildPay.Repositories\n{\n    public class ExpenditureRepository : IExpenditureRepository\n    {\n        private readonly WildPayDbContext _context;\n\n        public ExpenditureRepository(WildPayDbContext context)\n        {\n            _context = context;\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WildPay/Repositories/ExpenditureRepository.cs b/WildPay/Repositories/ExpenditureRepository.cs
--- a/WildPay/Repositories/ExpenditureRepository.cs	(revision f288beea6168d9817e4a06c9471e7dcdf63e0dbe)
+++ b/WildPay/Repositories/ExpenditureRepository.cs	(date 1722436570852)
@@ -13,6 +13,46 @@
         {
             _context = context;
         }
+        
+        // method to get a list of expenditures of a given group
+        public Task<List<Expenditure>> GetExpendituresAsync(string userId)
+        {
+            throw new NotImplementedException();
+        }
 
+        // method to get an expenditure by its id 
+        public Task<Expenditure?> GetExpenditureByIdAsync(int expenditureId)
+        {
+            throw new NotImplementedException();
+        }
+
+        public Task EditExpenditureAsync(Expenditure expenditure)
+        {
+            throw new NotImplementedException();
+        }
+        
+    // method to create a new expenditure in a given group
+        public async Task AddExpenditureAsync(Expenditure expenditure,string groupId)
+        {
+            await _context.Expenditures.AddAsync(expenditure);
+            await _context.SaveChangesAsync();
+
+            var group = await _context.Groups.FindAsync(groupId);
+        }
+
+        public Task<bool> AddMemberToExpenditureAsync(Expenditure expenditure, string email)
+        {
+            throw new NotImplementedException();
+        }
+
+        public Task DeleteMemberFromExpenditureAsync(Expenditure expenditure, string userId)
+        {
+            throw new NotImplementedException();
+        }
+
+        public Task<bool> DeleteExpenditureAsync(int expenditureId)
+        {
+            throw new NotImplementedException();
+        }
     }
 }
Index: WildPay/Interfaces/IExpenditureRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using WildPay.Models.Entities;\n\nnamespace WildPay.Interfaces\n{\n    public interface IExpenditureRepository\n    {\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WildPay/Interfaces/IExpenditureRepository.cs b/WildPay/Interfaces/IExpenditureRepository.cs
--- a/WildPay/Interfaces/IExpenditureRepository.cs	(revision f288beea6168d9817e4a06c9471e7dcdf63e0dbe)
+++ b/WildPay/Interfaces/IExpenditureRepository.cs	(date 1722437225172)
@@ -4,5 +4,12 @@
 {
     public interface IExpenditureRepository
     {
+        Task<List<Expenditure>> GetExpendituresAsync(string groupId);
+        Task<Expenditure?> GetExpenditureByIdAsync(int expenditureId);
+        Task EditExpenditureAsync(Expenditure expenditure);
+        Task AddExpenditureAsync(Expenditure expenditure, string groupId);
+        Task<bool> AddMemberToExpenditureAsync(Expenditure expenditure, string email);
+        Task DeleteMemberFromExpenditureAsync(Expenditure expenditure, string userId);
+        Task<bool> DeleteExpenditureAsync(int expenditureId);
     }
 }
Index: WildPay/Controllers/ExpenditureController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing NuGet.Protocol.Core.Types;\nusing WildPay.Interfaces;\nusing WildPay.Models.Entities;\n\nnamespace WildPay.Controllers;\n\n[Authorize]\npublic class ExpenditureController : Controller\n{\n    private readonly UserManager<ApplicationUser> _userManager;\n    private readonly IExpenditureRepository _expenditureRepository;\n    private readonly IGroupRepository _groupRepository;\n\n    public ExpenditureController(UserManager<ApplicationUser> userManager, IExpenditureRepository expenditureRepository, IGroupRepository groupRepository)\n    {\n        _userManager = userManager;\n        _expenditureRepository = expenditureRepository;\n        _groupRepository = groupRepository;\n    }\n\n    // READ\n    async public Task<IActionResult> GroupExpenditures(int Id)\n    {\n        //Get the group\n        Group? group = await _groupRepository.GetGroupByIdAsync(Id);\n\n        //Return not found if no group is found\n        if (group == null)\n        {\n            return NotFound();\n        }\n\n        //Verify if the User belongs to the group, else we block the access\n        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) { return NotFound(); }\n\n        return View(group);\n    }\n\n    async public Task<IActionResult> GroupBalances(int Id)\n    {\n        //Get the group\n        Group? group = await _groupRepository.GetGroupByIdAsync(Id);\n\n        //Return not found if no group is found\n        if (group == null)\n        {\n            return NotFound();\n        }\n\n        //Verify if the User belongs to the group, else we block the access\n        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) { return NotFound(); }\n\n        return View(group);\n    }\n\n    // UPDATE\n    [HttpGet]\n    public IActionResult Edit()\n    {\n        return View();\n    }\n\n    // UPDATE\n    [HttpPost]\n    public IActionResult Edit(Expenditure expenditure)\n    {\n        return RedirectToAction(actionName: \"List\", controllerName: \"Expenditure\");\n    }\n\n    // CREATE\n    [HttpGet]\n    public IActionResult Create()\n    {\n        return View();\n    }\n\n    // CREATE\n    [HttpPost]\n    public IActionResult Create(Expenditure expenditure)\n    {\n        return RedirectToAction(actionName: \"List\", controllerName: \"Expenditure\");\n    }\n\n    // DELETE\n    [HttpGet]\n    public IActionResult Delete()\n    {\n        return View();\n    }\n\n    // DELETE\n    [HttpPost]\n    public IActionResult Delete(Expenditure expenditure)\n    {\n        return RedirectToAction(actionName: \"List\", controllerName: \"Expenditure\");\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WildPay/Controllers/ExpenditureController.cs b/WildPay/Controllers/ExpenditureController.cs
--- a/WildPay/Controllers/ExpenditureController.cs	(revision f288beea6168d9817e4a06c9471e7dcdf63e0dbe)
+++ b/WildPay/Controllers/ExpenditureController.cs	(date 1722433812380)
@@ -43,6 +43,7 @@
     {
         //Get the group
         Group? group = await _groupRepository.GetGroupByIdAsync(Id);
+        
 
         //Return not found if no group is found
         if (group == null)
@@ -79,8 +80,9 @@
 
     // CREATE
     [HttpPost]
-    public IActionResult Create(Expenditure expenditure)
+    public async Task<IActionResult> Create(Expenditure expenditure)
     {
+        
         return RedirectToAction(actionName: "List", controllerName: "Expenditure");
     }
 
@@ -93,8 +95,9 @@
 
     // DELETE
     [HttpPost]
-    public IActionResult Delete(Expenditure expenditure)
+    public async Task<IActionResult> Delete(Expenditure expenditure)
     {
+        
         return RedirectToAction(actionName: "List", controllerName: "Expenditure");
     }
 }
\ No newline at end of file
Index: WildPay/Views/Expenditure/List.cshtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@model WildPay.Models.Entities.Group\n@{\n    \n}\n<div>\n    <h2>@Model.Name</h2>\n    <h3>liste de dépenses</h3>\n    <table>\n        \n        @foreach (var expenditure in Model.Expenditures)\n        {\n            <tr>\n                <a asp-action=\"Edit\" asp-controller=\"Expenditure\">\n                    <td>@expenditure.Name <br/>\n                    payé par @expenditure.ApplicationUser.Firstname<td>\n                    <td>@expenditure.Amount</td>\n                </a>\n\n            </tr>\n        }\n    </table>\n\n\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WildPay/Views/Expenditure/List.cshtml b/WildPay/Views/Expenditure/List.cshtml
--- a/WildPay/Views/Expenditure/List.cshtml	(revision f288beea6168d9817e4a06c9471e7dcdf63e0dbe)
+++ b/WildPay/Views/Expenditure/List.cshtml	(date 1722417589517)
@@ -5,8 +5,8 @@
 <div>
     <h2>@Model.Name</h2>
     <h3>liste de dépenses</h3>
+    
     <table>
-        
         @foreach (var expenditure in Model.Expenditures)
         {
             <tr>
@@ -15,7 +15,6 @@
                     payé par @expenditure.ApplicationUser.Firstname<td>
                     <td>@expenditure.Amount</td>
                 </a>
-
             </tr>
         }
     </table>
Index: WildPay/Views/Expenditure/Add.cshtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WildPay/Views/Expenditure/Add.cshtml b/WildPay/Views/Expenditure/Add.cshtml
new file mode 100644
--- /dev/null	(date 1722433446781)
+++ b/WildPay/Views/Expenditure/Add.cshtml	(date 1722433446781)
@@ -0,0 +1,27 @@
+@model WildPay.Models.Entities.Expenditure
+
+@{
+    ViewData["Title"] = "Création d'une dépense";
+}
+
+<div>
+    <form method="post">
+        <label asp-for="Name">nom de la dépense</label>
+        <input type="text" asp-for="Name" placeholder="ex.: piquenique"/>
+        
+        <label asp-for="Amount">valeur de la dépense</label>
+        <input type="number" asp-for="Amount" step="0.01" placeholder="ex.: 40.99" min="0" max="100000"/>
+        
+        <label asp-for="Category">catégorie</label>
+        <input asp-for="Category" type="text" placeholder="ex.: voyage"/>
+        
+        <p>payé par</p>
+        @foreach (var user in @Model.Group.ApplicationUsers)
+        {
+            <input type="radio" asp-for="ApplicationUser" value=@user.Id/>
+            <label asp-for="ApplicationUser">@user.Firstname</label>
+        }
+        
+        <button asp-action="Create" asp-controller="Expenditure">Enregistrer</button>
+    </form>
+</div>
\ No newline at end of file
