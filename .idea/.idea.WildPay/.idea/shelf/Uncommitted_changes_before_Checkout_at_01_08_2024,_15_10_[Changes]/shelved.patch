Index: WildPay/Views/Expenditure/GroupExpenditures.cshtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@using WildPay.Models.Entities\n@model WildPay.Models.Entities.Group\n\n@{\n    ViewData[\"Title\"] = \"Dépenses \" + Model.Name;\n}\n\n<div>\n    <partial name=\"_GroupTitlePartial\" model=\"Model\" />\n    <hr />\n    <div class=\"row\">\n        <partial name=\"_GroupNavBarPartial\" model=\"Model\" />\n        <div class=\"col-md-9\">\n            <section>\n                <div class=\"card\">\n                    <h5 class=\"card-header\">\n                        <a class=\"btn btn-outline-success material-symbols-outlined\" asp-action=\"Add\" asp-controller=\"Expenditure\" asp-route-id=@Model.Id>add</a> Dépenses :\n                    </h5>\n                    @if (Model is not null && Model.Expenditures.Count != 0)\n                    {\n                        foreach (Expenditure expenditure in Model.Expenditures)\n                        {\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\"><a class=\"group-settings-button material-symbols-outlined\" asp-action=\"Update\" asp-controller=\"Expenditure\" asp-route-id=@Model.Id>edit</a> @expenditure.Name - @expenditure.Amount€</h5>\n                                @if (expenditure.Payer is not null)\n                                {\n                                    <p class=\"card-text\">@expenditure.Amount€ payé par @expenditure.Payer.Firstname @expenditure.Payer.Lastname.</p>\n                                }\n                                else\n                                {\n                                    <p class=\"card-text\">@expenditure.Amount€ payé par un ancien membre.</p>\n                                }\n                                <div class=\"card-footer text-body-secondary\">@expenditure.Date.ToShortDateString()</div>\n                            </div>\n                        }\n                    }\n                    else\n                    {\n                        <p>Ce groupe ne contient aucune dépense.</p>\n                    }\n                </div>\n            </section>\n        </div>\n    </div>\n</div>
===================================================================
diff --git a/WildPay/Views/Expenditure/GroupExpenditures.cshtml b/WildPay/Views/Expenditure/GroupExpenditures.cshtml
--- a/WildPay/Views/Expenditure/GroupExpenditures.cshtml	
+++ b/WildPay/Views/Expenditure/GroupExpenditures.cshtml	
@@ -14,7 +14,7 @@
             <section>
                 <div class="card">
                     <h5 class="card-header">
-                        <a class="btn btn-outline-success material-symbols-outlined" asp-action="Add" asp-controller="Expenditure" asp-route-id=@Model.Id>add</a> Dépenses :
+                        <a class="btn btn-outline-success material-symbols-outlined" asp-action="Add" asp-controller="Expenditure" asp-route-Id=@Model.Id>add</a> Dépenses :
                     </h5>
                     @if (Model is not null && Model.Expenditures.Count != 0)
                     {
Index: WildPay/Views/Group/Update.cshtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@model WildPay.Models.ViewModels.UpdateGroupModel\n\n@{\n    ViewData[\"Title\"] = \"Modifier \" + Model.GroupToUpdate.Name;\n}\n\n<div>\n    <partial name=\"_GroupTitlePartial\" model=\"Model.GroupToUpdate\" />\n    <hr />\n    <div class=\"row\">\n        <partial name=\"_GroupNavBarPartial\" model=\"Model.GroupToUpdate\" />\n\n        <div class=\"col-md-9\">\n            <h3>Modifier groupe</h3>\n\n            <form method=\"post\">\n                <input type=\"text\" asp-for=\"@Model.GroupToUpdate.Id\" hidden=\"hidden\" readonly />\n\n                <label class=\"control-label\" asp-for=\"@Model.GroupToUpdate.Name\">Nom du groupe</label>\n                <input class=\"form-control\" type=\"text\" asp-for=\"GroupToUpdate.Name\" />\n\n                <label class=\"control-label\" asp-for=\"@Model.GroupToUpdate.Image\">Image du groupe</label>\n                <input class=\"form-control\" type=\"text\" asp-for=\"GroupToUpdate.Image\" />\n\n                <button asp-action=\"Update\" asp-controller=\"Group\">Enregistrer</button>\n            </form>\n\n            <h3>Supprimer un participant</h3>\n            <table>\n                <tr>\n                    @foreach (var user in Model.GroupToUpdate.ApplicationUsers)\n                    {\n                        <td>@user.Firstname</td>\n                        <td>@user.Lastname</td>\n                        <td><a href=\"@Url.ActionLink(\"DeleteMember\", \"Group\", new {userId = user.Id, groupId = Model.GroupToUpdate.Id})\"><span class=\"material-symbols-outlined\">delete</span></a></td> <!--bin icon-->\n                    }\n                </tr>\n            </table>\n\n            <h3>Ajouter un participant</h3>\n            <div>\n                <span class=\"material-symbols-outlined\">person_add</span> <!-- person add icon-->\n            </div>\n\n            <form method=\"post\">\n                <div class=\"form-group\">\n                    <input type=\"text\" asp-for=\"@Model.NewMember.GroupId\" hidden=\"hidden\" readonly />\n\n                    <label class=\"control-label\" asp-for=\"@Model.NewMember.Email\">Email</label>\n                    <input class=\"form-control\" type=\"email\" asp-for=\"@Model.NewMember.Email\" />\n\n                    <button asp-action=\"AddMember\" asp-controller=\"Group\">Ajouter</button>\n                </div>\n            </form>\n\n            <a class=\"btn btn-danger d-flex justify-content-center align-items-center w-25\" asp-action=\"Delete\" asp-controller=\"Group\" asp-route-Id=\"@Model.GroupToUpdate.Id\"><span class=\"material-symbols-outlined\">delete</span>Supprimer le groupe</a>\n        </div>\n    </div>\n</div>
===================================================================
diff --git a/WildPay/Views/Group/Update.cshtml b/WildPay/Views/Group/Update.cshtml
--- a/WildPay/Views/Group/Update.cshtml	
+++ b/WildPay/Views/Group/Update.cshtml	
@@ -1,59 +1,52 @@
-@model WildPay.Models.ViewModels.UpdateGroupModel
+@model WildPay.Models.Entities.Group
 
 @{
-    ViewData["Title"] = "Modifier " + Model.GroupToUpdate.Name;
+    ViewData["Title"] = "Modifier " + Model.Name;
 }
 
 <div>
-    <partial name="_GroupTitlePartial" model="Model.GroupToUpdate" />
+    <partial name="_GroupTitlePartial" model="Model" />
     <hr />
     <div class="row">
-        <partial name="_GroupNavBarPartial" model="Model.GroupToUpdate" />
-
+        <div class="col-md-3">
+            <partial name="_GroupNavBarPartial" model="Model" />
+        </div>
         <div class="col-md-9">
             <h3>Modifier groupe</h3>
-
             <form method="post">
-                <input type="text" asp-for="@Model.GroupToUpdate.Id" hidden="hidden" readonly />
-
-                <label class="control-label" asp-for="@Model.GroupToUpdate.Name">Nom du groupe</label>
-                <input class="form-control" type="text" asp-for="GroupToUpdate.Name" />
+                <label asp-for="Name">Nom du groupe</label>
+                <input type="text" asp-for="Name" value=@Model.Name />
 
-                <label class="control-label" asp-for="@Model.GroupToUpdate.Image">Image du groupe</label>
-                <input class="form-control" type="text" asp-for="GroupToUpdate.Image" />
-
-                <button asp-action="Update" asp-controller="Group">Enregistrer</button>
-            </form>
+                <label asp-for="Image">Image du groupe</label>
+                <input type="text" asp-for="Image" value=@Model.Image />
 
-            <h3>Supprimer un participant</h3>
-            <table>
-                <tr>
-                    @foreach (var user in Model.GroupToUpdate.ApplicationUsers)
-                    {
-                        <td>@user.Firstname</td>
-                        <td>@user.Lastname</td>
-                        <td><a href="@Url.ActionLink("DeleteMember", "Group", new {userId = user.Id, groupId = Model.GroupToUpdate.Id})"><span class="material-symbols-outlined">delete</span></a></td> <!--bin icon-->
-                    }
-                </tr>
-            </table>
+                <h3>Supprimer un participant</h3>
+                <table>
+                    <tr>
+                        @foreach (var user in Model.ApplicationUsers)
+                        {
+                            <td>@user.Firstname</td>
+                            <td>@user.Lastname</td>
+                            <td><a class="btn btn-danger material-symbols-outlined" asp-action="DeleteUserFromGroup" asp-controller="Group" asp-route-id=@Model.Id>delete</a></td> <!--bin icon-->
+                        }
+                    </tr>
+                </table>
 
-            <h3>Ajouter un participant</h3>
-            <div>
-                <span class="material-symbols-outlined">person_add</span> <!-- person add icon-->
-            </div>
-
-            <form method="post">
-                <div class="form-group">
-                    <input type="text" asp-for="@Model.NewMember.GroupId" hidden="hidden" readonly />
-
-                    <label class="control-label" asp-for="@Model.NewMember.Email">Email</label>
-                    <input class="form-control" type="email" asp-for="@Model.NewMember.Email" />
-
-                    <button asp-action="AddMember" asp-controller="Group">Ajouter</button>
+
+                <h3>ajouter un participant</h3>
+                <div>
+                    <span class="material-symbols-outlined">person_add</span> <!-- person add icon-->
+                </div>
+                <div>
+                    <label>Email</label>
+                    <input type="email" />
                 </div>
+
+                <button asp-action="Update" asp-controller="Group" asp-route-groupId=@Model.Id>Enregistrer</button>
             </form>
 
-            <a class="btn btn-danger d-flex justify-content-center align-items-center w-25" asp-action="Delete" asp-controller="Group" asp-route-Id="@Model.GroupToUpdate.Id"><span class="material-symbols-outlined">delete</span>Supprimer le groupe</a>
+            <a class="btn btn-danger d-flex justify-content-center align-items-center w-25" asp-action="Delete" asp-controller="Group" asp-route-id=@Model.Id><span class="material-symbols-outlined">delete</span> Supprimer le groupe</a>
         </div>
     </div>
-</div>
\ No newline at end of file
+
+</div>
Index: WildPay/Views/Expenditure/List.cshtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@model WildPay.Models.Entities.Group\n@{\n    \n}\n<div>\n    <h2>@Model.Name</h2>\n    <h3>liste de dépenses</h3>\n    <table>\n        \n        @foreach (var expenditure in Model.Expenditures)\n        {\n            <tr>\n                <a asp-action=\"Edit\" asp-controller=\"Expenditure\">\n                    <td>@expenditure.Name <br/>\n                    payé par @expenditure.Payer.Firstname<td>\n                    <td>@expenditure.Amount</td>\n                </a>\n\n            </tr>\n        }\n    </table>\n\n\n</div>
===================================================================
diff --git a/WildPay/Views/Expenditure/List.cshtml b/WildPay/Views/Expenditure/List.cshtml
--- a/WildPay/Views/Expenditure/List.cshtml	
+++ b/WildPay/Views/Expenditure/List.cshtml	
@@ -5,8 +5,8 @@
 <div>
     <h2>@Model.Name</h2>
     <h3>liste de dépenses</h3>
+    
     <table>
-        
         @foreach (var expenditure in Model.Expenditures)
         {
             <tr>
@@ -15,7 +15,6 @@
                     payé par @expenditure.Payer.Firstname<td>
                     <td>@expenditure.Amount</td>
                 </a>
-
             </tr>
         }
     </table>
Index: WildPay/Controllers/GroupController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing WildPay.Interfaces;\nusing WildPay.Models.Entities;\nusing WildPay.Models.ViewModel;\nusing WildPay.Models.ViewModels;\n\nnamespace WildPay.Controllers;\n\n// methods are only accessible if the user is connected\n[Authorize]\npublic class GroupController : Controller\n{\n    private readonly UserManager<ApplicationUser> _userManager;\n    private readonly IGroupRepository _groupRepository;\n\n    public GroupController(UserManager<ApplicationUser> userManager, IGroupRepository groupRepository)\n    {\n        _userManager = userManager;\n        _groupRepository = groupRepository;\n    }\n\n    // READ: get all the groups for the connected user\n    [HttpGet]\n    public async Task<IActionResult> List()\n    {\n        var userId = _userManager.GetUserId(User);\n        if (userId is null) return NotFound();\n\n        var groups = await _groupRepository.GetGroupsAsync(userId);\n        return View(groups);\n    }\n\n    [HttpGet]\n    public async Task<IActionResult> Index(int Id)\n    {\n        //Get the group\n        Group? group = await _groupRepository.GetGroupByIdAsync(Id);\n\n        //Return not found if no group is found\n        if (group is null) return NotFound();\n\n        //Verify if the User belongs to the group, else we block the access\n        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();\n\n        return View(group);\n    }\n\n    // CREATE group view\n    [HttpGet]\n    public IActionResult Add()\n    {\n        return View();\n    }\n\n    // CREATE group action\n    [HttpPost]\n    public async Task<IActionResult> Add(Group group)\n    {\n        string? userId = _userManager.GetUserId(User);\n        if (userId is null) return NotFound();\n\n        await _groupRepository.AddGroupAsync(group.Name, group.Image, userId);\n        \n        return RedirectToAction(actionName: \"List\", controllerName: \"Group\");\n    }\n\n    // UPDATE group view\n    [HttpGet]\n    public async Task<IActionResult> Update(int Id)\n    {\n        Group? group = await _groupRepository.GetGroupByIdAsync(Id);\n\n        if (group is null) return NotFound();\n\n        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return RedirectToAction(\"List\", \"Group\");\n\n        UpdateGroupModel updateGroupModel = new UpdateGroupModel\n        {\n            GroupToUpdate = group,\n            NewMember = new Models.ViewModel.MemberAdded()\n            {\n                GroupId = Id,\n                Email = \"\"\n            }\n        };\n\n        return View(updateGroupModel);\n    }\n\n    // UPDATE group action\n    [HttpPost]\n    public async Task<IActionResult> Update(UpdateGroupModel modelUpdated)\n    {\n        Group? groupUpdated = modelUpdated.GroupToUpdate;\n\n        if (groupUpdated is null) return NotFound();\n\n        if (groupUpdated.Image is null)\n        {\n            groupUpdated.Image = string.Empty;\n        }\n\n        await _groupRepository.EditGroupAsync(groupUpdated);\n        return RedirectToAction(actionName: \"List\", controllerName: \"Group\");\n    }\n\n    // Add a member to a group using a form\n    // Make sure to add a hidden field for the group ID\n    [HttpPost]\n    public async Task<IActionResult> AddMember(UpdateGroupModel modelUpdated)\n    {\n        if (modelUpdated.NewMember is null) return NotFound();\n\n        MemberAdded newMember = modelUpdated.NewMember;\n        if (newMember is null) return NotFound();\n\n        if (newMember.Email is null) return NotFound();\n\n        Group? group = await _groupRepository.GetGroupByIdAsync(newMember.GroupId);\n\n        if (group is null) return NotFound();\n\n        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();\n\n        // Returns false if no match is found;\n        // think about a way to handle the case the email doesn't match a user\n        await _groupRepository.AddMemberToGroupAsync(group, newMember.Email);\n\n        return RedirectToAction(actionName: \"Update\", controllerName: \"Group\", new { Id = newMember.GroupId });    \n    }\n\n    // Delete a member from a group view\n    [HttpGet]\n    public async Task<IActionResult> DeleteMember(string userId, int groupId)\n    {\n        Group? group = await _groupRepository.GetGroupByIdAsync(groupId);\n        if (group is null) return NotFound();\n\n        ApplicationUser? userToRemove = group.ApplicationUsers.FirstOrDefault(u => u.Id == userId);\n\n        if (group is null) return NotFound();\n\n        if (userToRemove is null) return NotFound();\n\n        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();\n\n        ViewBag.user = userToRemove;\n        return View(\"DeleteMember\", group);\n    }\n\n    // Delete a member from a group action\n    [HttpPost]\n    public async Task<IActionResult> DeleteMember(string userId, int groupId, Group group)\n    {\n        Group? userGroup = await _groupRepository.GetGroupByIdAsync(groupId);\n\n        if (userGroup is null) return NotFound();\n\n        if (_userManager.GetUserId(User) is null || userGroup.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();\n\n        // Returns false if no match is found;\n        // think about a way to handle the case the email doesn't match a user\n        await _groupRepository.DeleteMemberFromGroupAsync(userGroup, userId);\n\n        return RedirectToAction(actionName: \"Update\", controllerName: \"Group\", new { Id = groupId });\n    }\n\n    // DELETE group view\n    [HttpGet]\n    public async Task<IActionResult> Delete(int Id)\n    {\n        Group? group = await _groupRepository.GetGroupByIdAsync(Id);\n\n        if (group is null) return NotFound();\n\n        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();\n\n        return View(group);\n    }\n\n    // DELETE group action \n    [HttpPost]\n    public async Task<IActionResult> Delete(int Id, Group group)\n    {\n        await _groupRepository.DeleteGroupAsync(Id);\n        return RedirectToAction(actionName: \"List\", controllerName: \"Group\");\n    }\n}
===================================================================
diff --git a/WildPay/Controllers/GroupController.cs b/WildPay/Controllers/GroupController.cs
--- a/WildPay/Controllers/GroupController.cs	
+++ b/WildPay/Controllers/GroupController.cs	
@@ -1,14 +1,13 @@
+using System.Security.Claims;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Identity;
 using Microsoft.AspNetCore.Mvc;
 using WildPay.Interfaces;
 using WildPay.Models.Entities;
-using WildPay.Models.ViewModel;
-using WildPay.Models.ViewModels;
 
 namespace WildPay.Controllers;
 
-// methods are only accessible if the user is connected
+// only accessible if the user is connected
 [Authorize]
 public class GroupController : Controller
 {
@@ -26,8 +25,6 @@
     public async Task<IActionResult> List()
     {
         var userId = _userManager.GetUserId(User);
-        if (userId is null) return NotFound();
-
         var groups = await _groupRepository.GetGroupsAsync(userId);
         return View(groups);
     }
@@ -39,15 +36,15 @@
         Group? group = await _groupRepository.GetGroupByIdAsync(Id);
 
         //Return not found if no group is found
-        if (group is null) return NotFound();
+        if (group == null) { return NotFound(); }
 
         //Verify if the User belongs to the group, else we block the access
-        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();
+        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) { return NotFound(); }
 
         return View(group);
     }
 
-    // CREATE group view
+    // CREATE view
     [HttpGet]
     public IActionResult Add()
     {
@@ -58,11 +55,9 @@
     [HttpPost]
     public async Task<IActionResult> Add(Group group)
     {
-        string? userId = _userManager.GetUserId(User);
-        if (userId is null) return NotFound();
-
+        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
         await _groupRepository.AddGroupAsync(group.Name, group.Image, userId);
-        
+
         return RedirectToAction(actionName: "List", controllerName: "Group");
     }
 
@@ -70,113 +65,59 @@
     [HttpGet]
     public async Task<IActionResult> Update(int Id)
     {
-        Group? group = await _groupRepository.GetGroupByIdAsync(Id);
-
-        if (group is null) return NotFound();
-
-        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return RedirectToAction("List", "Group");
-
-        UpdateGroupModel updateGroupModel = new UpdateGroupModel
-        {
-            GroupToUpdate = group,
-            NewMember = new Models.ViewModel.MemberAdded()
-            {
-                GroupId = Id,
-                Email = ""
-            }
-        };
-
-        return View(updateGroupModel);
+        var group = await _groupRepository.GetGroupByIdAsync(Id);
+        return View(group);
     }
 
     // UPDATE group action
     [HttpPost]
-    public async Task<IActionResult> Update(UpdateGroupModel modelUpdated)
+    public async Task<IActionResult> Update(Group group)
     {
-        Group? groupUpdated = modelUpdated.GroupToUpdate;
-
-        if (groupUpdated is null) return NotFound();
-
-        if (groupUpdated.Image is null)
+        if (group.Image is null)
         {
-            groupUpdated.Image = string.Empty;
+            group.Image = string.Empty;
         }
 
-        await _groupRepository.EditGroupAsync(groupUpdated);
+        await _groupRepository.EditGroupAsync(group);
         return RedirectToAction(actionName: "List", controllerName: "Group");
     }
 
     // Add a member to a group using a form
     // Make sure to add a hidden field for the group ID
     [HttpPost]
-    public async Task<IActionResult> AddMember(UpdateGroupModel modelUpdated)
+    public async Task<IActionResult> AddMember(int groupId, string email)
     {
-        if (modelUpdated.NewMember is null) return NotFound();
-
-        MemberAdded newMember = modelUpdated.NewMember;
-        if (newMember is null) return NotFound();
-
-        if (newMember.Email is null) return NotFound();
-
-        Group? group = await _groupRepository.GetGroupByIdAsync(newMember.GroupId);
-
-        if (group is null) return NotFound();
+        Group? group = await _groupRepository.GetGroupByIdAsync(groupId);
 
-        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();
-
-        // Returns false if no match is found;
-        // think about a way to handle the case the email doesn't match a user
-        await _groupRepository.AddMemberToGroupAsync(group, newMember.Email);
-
-        return RedirectToAction(actionName: "Update", controllerName: "Group", new { Id = newMember.GroupId });    
+        if (group != null)
+        {
+            // Returns false if no match is found;
+            // think about a way to handle the case the email doesn't match a user
+            await _groupRepository.AddMemberToGroupAsync(group, email);
+        }
+        return RedirectToAction(actionName: "Edit", controllerName: "Group");
     }
 
-    // Delete a member from a group view
+    // Delete a member from a group
     [HttpGet]
-    public async Task<IActionResult> DeleteMember(string userId, int groupId)
+    public async Task<IActionResult> DeleteMember(int groupId, string userId)
     {
         Group? group = await _groupRepository.GetGroupByIdAsync(groupId);
-        if (group is null) return NotFound();
-
-        ApplicationUser? userToRemove = group.ApplicationUsers.FirstOrDefault(u => u.Id == userId);
-
-        if (group is null) return NotFound();
-
-        if (userToRemove is null) return NotFound();
-
-        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();
-
-        ViewBag.user = userToRemove;
-        return View("DeleteMember", group);
-    }
 
-    // Delete a member from a group action
-    [HttpPost]
-    public async Task<IActionResult> DeleteMember(string userId, int groupId, Group group)
-    {
-        Group? userGroup = await _groupRepository.GetGroupByIdAsync(groupId);
-
-        if (userGroup is null) return NotFound();
-
-        if (_userManager.GetUserId(User) is null || userGroup.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();
-
-        // Returns false if no match is found;
-        // think about a way to handle the case the email doesn't match a user
-        await _groupRepository.DeleteMemberFromGroupAsync(userGroup, userId);
-
-        return RedirectToAction(actionName: "Update", controllerName: "Group", new { Id = groupId });
+        if (group != null)
+        {
+            // Returns false if no match is found;
+            // think about a way to handle the case the email doesn't match a user
+            await _groupRepository.DeleteMemberFromGroupAsync(group, userId);
+        }
+        return RedirectToAction(actionName: "Edit", controllerName: "Group");
     }
 
     // DELETE group view
     [HttpGet]
     public async Task<IActionResult> Delete(int Id)
     {
-        Group? group = await _groupRepository.GetGroupByIdAsync(Id);
-
-        if (group is null) return NotFound();
-
-        if (_userManager.GetUserId(User) is null || group.ApplicationUsers.FirstOrDefault(el => el.Id == _userManager.GetUserId(User)) is null) return NotFound();
-
+        var group = await _groupRepository.GetGroupByIdAsync(Id);
         return View(group);
     }
 
