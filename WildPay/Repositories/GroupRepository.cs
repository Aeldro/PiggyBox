using Microsoft.EntityFrameworkCore;
using WildPay.Data;
using WildPay.Interfaces;
using WildPay.Models.Entities;

namespace WildPay.Repositories
{
    public class GroupRepository : IGroupRepository
    {
        private readonly WildPayDbContext _context;

        public GroupRepository(WildPayDbContext context)
        {
            _context = context;
        }

        // the user ID is a string automatically generated by the user.
        // We want to retrieve only the groups to whom the user belongs.
        public async Task<List<Group>> GetGroupsAsync(string userId)
        {
            List<Group> groups = await _context.Users
                .Where(u => u.Id == userId)
                .SelectMany(u => u.Groups)
                .ToListAsync();
            return groups;
        }

        public async Task<Group?> GetGroupByIdAsync(int groupId)
        {
            Group? group = await _context.Groups
                .Include(g => g.ApplicationUsers)
                .Include(g => g.Expenditures)
                .Include(g => g.Categories)
                .FirstOrDefaultAsync(g => g.Id == groupId);
            return group;
        }

        // Change only the name and image
        public async Task EditGroupAsync(Group group)
        {
            if (await _context.Groups.FindAsync(group.Id) is Group found && found != null)
            {
                found.Name = group.Name;
                found.Image = group.Image;

                await _context.SaveChangesAsync();
            }
        }

        // Add a new group to the entity table
        // + call the method to add the user to the group
        public async Task AddGroupAsync(string name, string image, string userId)
        {
            Group newGroup = new Group()
            {
                Name = name,
                Image = image
            };

            await _context.Groups.AddAsync(newGroup);
            await _context.SaveChangesAsync();

            var user = await _context.Users.FindAsync(userId);

            // Add the user that creates the group to the group
            // == new record into the join table ApplicationUserGroups
            await AddMemberToGroupAsync(newGroup, user.NormalizedEmail);
        }

        // Add a member to the group using its email (case insensitive)
        public async Task<bool> AddMemberToGroupAsync(Group group, string email)
        {
            email = email.ToUpper();

            // returns the default value for user (null?) if no match is found
            ApplicationUser? user = await _context.Users
                .FirstOrDefaultAsync(user => user.NormalizedEmail == email);

            if (user != null)
            {
                user.Groups.Add(group);

                await _context.SaveChangesAsync();
                return true;
            }
            // return HttpNotFound?
            return false;
        }

        // Delete the link between the user and the group;
        // user and group should remain untouched.
        public async Task DeleteMemberFromGroupAsync(Group group, string userId)
        {
            ApplicationUser? member = await _context.Users.FirstOrDefaultAsync(u => u.Id == userId);

            if (member != null && member.Groups.Exists(g => g == group))
            {
                // check if that remove the member in the list of Group
                member.Groups.Remove(group);

                await _context.SaveChangesAsync();
            }
        }

        public async Task<bool> DeleteGroupAsync(int groupId)
        {
            if (await _context.Groups.FindAsync(groupId) is Group found)
            {
                _context.Groups.Remove(found);

                // This method is override in WildPayDbContext
                // and delete all the expenditures linked to the removed group
                // before deleting the group
                await _context.SaveChangesAsync();
                return true;
            }

            return false;
        }
    }
}
